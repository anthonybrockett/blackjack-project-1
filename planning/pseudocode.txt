1) Handle a player making a bet
    1.1) create buttons for 10, 25, 100, and Max
    1.2) increase current bet by selected total
    1.3) reduce bank by selected total
2) Handle when a player hits
    2.1) playerHand gains an additional element
        2.1.1) if playerHandTotal > 21, move to playerBust
        2.1.2) if playerHandTotal < 21, ask for h/s/sr
3) Handle when a player stays
    3.1) playerHand does not change
    3.2) move to dealerHand evaluation
4) Handle when a player wins a Hand
    4.1) set currentHand Status to 'W'
    4.2) bank increases by 2*current bet
5) Handle when a player loses a Hand
    5.1) set currentHand Status to 'L'
    5.2) bank does not change
6) Handle when a player surrenders a Hand
    6.1) set currentHand status to 'S' 
    6.2) bank += half of the original bet
7) Handle when a playerHandTotal > 21
    7.1) set currentHand Status to 'L' (current hand ends => dealer does ot take additional cards)
    7.2) bank does not change
    7.3) remove visibility on h/s/sr
8) Handle when dealerHandTotal > 21
    8.1) set currentHand Status to 'L'
    8.2) bank does not change
9) Handle when playerHand === blackjack
    9.1) bank increases by currentBet + currentBet*1.2
    9.2) set currentHandStatus to 'W'
10) Handle when dealerHand === blackjack
    10.1) set currentHand Status to 'L'
    10.2) bank does not change
11) Handle initializing a new Hand
    11.1) deal first 4 cards P/D/P/D
    11.2) second dealer card visibility should be hidden
    11.3) check for player or dealer blackjack
12) Handle split
    12.1) potential functionality added later
13) Handle Double
    13.1) potential functionality added later



/*----- constants -----*/
blackjack;

/*----- app's state (variables) -----*/
bank;
dealerHand;
dealerHandTotal;
playerHand;
playerHandTotal;
cardsUsed;
currentHandStatus;
/*----- cached element references -----*/

/*----- event listeners -----*/

/*----- functions -----*/
render()
initialize()



5) Handle a player clicking a square:
	5.1) Obtain the index of the square that was clicked by either:
		5.1.1) "Extracting" the index from an id assigned to the element in the HTML, or
		5.1.2) Looping through the cached square elements using a for loop and breaking out when the current square element equals the event object's target.
	5.2) If the board has a value at the index, immediately return because that square is already taken.
	5.3) If winner is not null, immediately return because the game is over.
	5.4) Update the board array at the index with the value of turn.
	5.5) Flip turns by multiplying turn by -1 (flips a 1 to -1, and vice-versa).
	5.6) Set the winner variable if there's a winner:
		5.6.1) Loop through the each of the winning combination arrays defined.
		5.6.2) Total up the three board positions using the three indexes in the current combo.
		5.6.3) Convert the total to an absolute value (convert any negative total to positive).
		5.6.4) If the total equals 3, we have a winner! Set winner to the board's value at the index specified by the first index in the combo array. Exit the loop.
	5.7) If there's no winner, check if there's a tie:
		5.7.1) Set winner to 'T' if there are no more nulls in the board array.
	5.8) All state has been updated, so render the state to the page (step 4.2).